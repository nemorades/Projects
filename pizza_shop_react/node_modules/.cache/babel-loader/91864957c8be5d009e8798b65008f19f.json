{"ast":null,"code":"import { createStore } from 'redux';\nimport { database } from './database.js';\n\nfunction reducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'ADD_TO_CART':\n      let added;\n      database.forEach(item => {\n        if (item.name == action.name) {\n          added = item;\n        }\n      });\n      let cartCopy = state.cart.slice();\n      let wasInCart = false;\n      cartCopy.forEach(item => {\n        if (item.name == action.name) {\n          wasInCart = true;\n          item.count += 1;\n        }\n      });\n\n      if (!wasInCart) {\n        cartCopy.push({ ...added,\n          count: 1\n        });\n      }\n\n      return {\n        cart: cartCopy,\n        cartCount: state.cartCount + 1,\n        cartTotal: state.cartTotal + added.price\n      };\n      break;\n\n    case 'INCREMENT':\n      let cartCop = state.cart.slice();\n      let newTotal = state.cartTotal;\n      cartCop.forEach(item => {\n        if (item.name == action.name) {\n          item.count += 1;\n          newTotal += item.price;\n        }\n      });\n      return {\n        cart: cartCop,\n        cartCount: state.cartCount + 1,\n        cartTotal: newTotal\n      };\n\n    case 'DECREMENT':\n      let cartC = state.cart.slice();\n      let total = state.cartTotal;\n      cartC.forEach((item, index) => {\n        if (item.name == action.name && item.count > 1) {\n          item.count -= 1;\n          total -= item.price;\n        } else if (item.name == action.name && item.count == 1) {\n          total -= item.price;\n          cartC.splice(index, 1);\n        }\n      });\n      return {\n        cart: cartC,\n        cartCount: state.cartCount - 1,\n        cartTotal: total\n      };\n\n    case 'DELETE_FROM_CART':\n      debugger;\n      let cartcopy = state.cart.slice();\n      let itemCount;\n      let itemTotal;\n      cartcopy.forEach((item, index) => {\n        itemCount = item.count;\n        itemTotal = item.price * itemCount;\n        cartcopy.splice(index, 1);\n      });\n      return {\n        cart: cartcopy,\n        cartCount: state.cartCount - state.itemCount,\n        cartTotal: state.cartTotal - itemTotal\n      };\n\n    default:\n      return state;\n  }\n}\n\nlet baseStore = {\n  cart: [],\n  cartTotal: 0,\n  cartCount: 0\n};\nconst store = createStore(reducer, baseStore);\nexport default store;","map":{"version":3,"sources":["C:/Users/alexr/Desktop/My project/pizza 2/src/store.js"],"names":["createStore","database","reducer","state","action","type","added","forEach","item","name","cartCopy","cart","slice","wasInCart","count","push","cartCount","cartTotal","price","cartCop","newTotal","cartC","total","index","splice","cartcopy","itemCount","itemTotal","baseStore","store"],"mappings":"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","sourcesContent":["import { createStore } from 'redux';\r\nimport {database} from './database.js';\r\n\r\nfunction reducer(state = [], action){\r\n\tswitch(action.type){\r\n\t\tcase 'ADD_TO_CART': \r\n\t\t\t\tlet added;\r\n\t\t\t\tdatabase.forEach(item => {\r\n\t\t\t\t\tif(item.name == action.name){\r\n\t\t\t\t\t\tadded = item;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tlet cartCopy = state.cart.slice();\r\n\t\t\t\tlet wasInCart = false;\r\n\t\t\t\tcartCopy.forEach(item => {\r\n\t\t\t\t\tif(item.name == action.name){\r\n\t\t\t\t\t\twasInCart = true;\r\n\t\t\t\t\t\titem.count += 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tif(!wasInCart){\r\n\t\t\t\t\tcartCopy.push({...added, count: 1});\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\tcart: cartCopy,\r\n\t\t\t\t\tcartCount: state.cartCount +1,\r\n\t\t\t\t\tcartTotal: state.cartTotal + added.price\r\n\t\t\t\t};\r\n\r\n\t\t\t\tbreak;\r\n\t\r\n\t\tcase 'INCREMENT': \r\n\t\t\t\tlet cartCop = state.cart.slice();\r\n\t\t\t\tlet newTotal = state.cartTotal;\r\n\t\t\t\tcartCop.forEach(item => {\r\n\t\t\t\t\tif(item.name == action.name){\r\n\t\t\t\t\t\titem.count += 1;\r\n\t\t\t\t\t\tnewTotal += item.price\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\tcart: cartCop,\r\n\t\t\t\t\tcartCount: state.cartCount +1,\r\n\t\t\t\t\tcartTotal: newTotal\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\r\n\t\tcase 'DECREMENT': \r\n\r\n\t\t\t\tlet cartC = state.cart.slice();\r\n\t\t\t\tlet total = state.cartTotal;\r\n\t\t\t\tcartC.forEach((item, index) => {\r\n\t\t\t\t\tif(item.name == action.name && item.count > 1){\r\n\t\t\t\t\t\titem.count -= 1;\r\n\t\t\t\t\t\ttotal -= item.price\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(item.name == action.name && item.count == 1){\r\n\t\t\t\t\t\ttotal  -= item.price;\r\n\t\t\t\t\t\tcartC.splice(index, 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\tcart: cartC,\r\n\t\t\t\t\tcartCount: state.cartCount -1,\r\n\t\t\t\t\tcartTotal: total\r\n\t\t\t\t};\r\n\r\n\t\t\t\t\r\n\r\n\t\t\tcase 'DELETE_FROM_CART': \r\n\t\t\tdebugger;\r\n\t\t\tlet cartcopy = state.cart.slice();\r\n\t\t\tlet itemCount;\r\n\t\t\tlet itemTotal;\r\n\t\t\t\tcartcopy.forEach((item,index) => {\r\n\t\t\t\t\titemCount = item.count;\r\n\t\t\t\t\titemTotal = item.price * itemCount;\r\n\t\t\t\t\tcartcopy.splice(index, 1);\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\tcart: cartcopy,\r\n\t\t\t\t\tcartCount: state.cartCount - state.itemCount,\r\n\t\t\t\t\tcartTotal: state.cartTotal - itemTotal\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\r\n\t\tdefault: return state;\r\n\t}\r\n}\r\n\r\nlet baseStore = {\r\n\tcart: [],\r\n\tcartTotal: 0,\r\n\tcartCount: 0\r\n}\r\n\r\nconst store = createStore(reducer, baseStore);\r\n\r\nexport default store;"]},"metadata":{},"sourceType":"module"}